I have created an app to be able to search care homes on a map and add new ones through a form.

Everything works in dev mode but in production the map is not refreshing to include the newly added care homes. I have set a revalidation time of 10s on the fetch for new care homes but i think i need a way to re-render the map and I am not sure how to do it.

The api endpoint runs at build time and after that subsequent requests do not include the new data. Why is that. 

As a solution i used server actions to get the carehome data and return it to the client map component. I am getting an error saying that Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.

todo 
include the Oauth for github and style the form
no specific role required for server page whereas client page has a requirement handled with middleware 
move these notes to notion

html rendering inside advanced marker create mini react apps so that when the children change they re-render into the div created and that is being shown as an advanced marker

Next auth 
https://www.youtube.com/watch?v=w2h54xz6Ndw&t=353s&ab_channel=DaveGray
https://www.youtube.com/watch?v=PEMfsqZ2-As&ab_channel=GTCoding
https://www.youtube.com/watch?v=iPGXk-i-VYU&list=PLRAV69dS1uWR7KF-zV6YPYtKYEHENETyE&ab_channel=HiteshChoudhary

route handler
in the api/auth/[...nextauth] catch all route nextauth is exported as a GET and POST 
in the options need to fetch the user from the db and encrypt/decrypt password etc

if you need to authorise a client component you need to use provider context (see end of video) but its better to have client components as children of server components where the client components are only used for client interaction


middleware is added in the src directory to apply auth to specified routes

2 other options to protect pages are:

1st option  if no session redirect to signin page and include callbackUrl to serverx so once signed in you return back to server page

//serverX page.jsx
import { options } from "../api/auth/[...nextauth]/options"
import { getServerSession } from "next-auth/next"
import UserCard from "../components/UserCard"
import { redirect } from "next/navigation"

export default async function ServerPage() {
    const session = await getServerSession(options)

    if (!session) {
        redirect('/api/auth/signin?callbackUrl=/serverx')
    }

    return (
        <section className="flex flex-col gap-6">
            <UserCard user={session?.user} pagetype={"Server"} />
        </section>
    )

}


home route page.jsx
2nd option use logic to determine what to display if the session exists or not
import { options } from "./api/auth/[...nextauth]/options"
import { getServerSession } from "next-auth/next"
import UserCard from "./components/UserCard"

export default async function Home() {
  const session = await getServerSession(options)

  return (
    <>
      {session ? (
        <UserCard user={session?.user} pagetype={"Home"} />
      ) : (
        <h1 className="text-5xl">You Shall Not Pass!</h1>
      )}
    </>
  )
}


---
Image retrival from auth provide 
set up remote patterns in next.config.js to be able to recieve the images

